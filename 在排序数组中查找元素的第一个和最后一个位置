class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int rightborder=getRightBorder(nums,target);
        int leftborder=getLeftBorder(nums,target);
        if(rightborder==-2&&leftborder==-2){ //说明target不在数组中
            return {-1,-1};
        }
        if((rightborder-leftborder)>1){
            return {leftborder+1,rightborder-1};
        }
        return {-1,-1};
    }

private:
    int getRightBorder(vector<int>& nums, int target){ //寻找右侧边界
        int left=0;
        int right=nums.size()-1;
        int rightborder=-2;
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]>target){
                right=mid-1;
            }else{
                left=mid+1;
                rightborder=left;
            }
        
      
    }
      return rightborder;
    }

    int getLeftBorder(vector<int>& nums, int target){//寻找左侧边界
        int left=0;
        int right=nums.size()-1;
        int leftborder=-2;
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]>=target){ //显然左侧边界是开区间
                right=mid-1;
                leftborder=right;
            }else{
                left=mid+1;
            }
        }
        return leftborder;
    }
    };
